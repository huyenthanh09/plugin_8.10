// (C) 2022 GoodData Corporation
import React, { useCallback } from "react";
import { useToastMessage } from "@gooddata/sdk-ui-kit";
import { selectDashboardRef, selectEnableInsightExportScheduling, selectIsScheduleEmailDialogOpen, selectIsScheduleEmailManagementDialogOpen, uiActions, useDashboardDispatch, useDashboardSelector, } from "../../../model";
import { ScheduledEmailDialog, ScheduledEmailManagementDialog } from "../../scheduledEmail";
export var useScheduledEmailDialogProvider = function () {
    var dispatch = useDashboardDispatch();
    var dashboardRef = useDashboardSelector(selectDashboardRef);
    var isInsightExportSchedulingEnabled = useDashboardSelector(selectEnableInsightExportScheduling);
    var openScheduleEmailingDialog = function () { return dispatch(uiActions.openScheduleEmailDialog()); };
    var closeScheduleEmailingDialog = function () { return dispatch(uiActions.closeScheduleEmailDialog()); };
    var openScheduleEmailingManagementDialog = function () {
        return isInsightExportSchedulingEnabled && dispatch(uiActions.openScheduleEmailManagementDialog());
    };
    var closeScheduleEmailingManagementDialog = function () {
        return isInsightExportSchedulingEnabled && dispatch(uiActions.closeScheduleEmailManagementDialog());
    };
    /*
     * exports and scheduling are not available when rendering a dashboard that is not persisted.
     * this can happen when a new dashboard is created and is being edited.
     *
     * the setup of menu items available in the menu needs to reflect this.
     */
    var defaultOnScheduleEmailing = useCallback(function () {
        if (!dashboardRef) {
            return;
        }
        if (isInsightExportSchedulingEnabled) {
            openScheduleEmailingManagementDialog();
        }
        else {
            openScheduleEmailingDialog();
        }
    }, [dashboardRef, isInsightExportSchedulingEnabled]);
    return {
        defaultOnScheduleEmailing: defaultOnScheduleEmailing,
        openScheduleEmailingDialog: openScheduleEmailingDialog,
        closeScheduleEmailingDialog: closeScheduleEmailingDialog,
        openScheduleEmailingManagementDialog: openScheduleEmailingManagementDialog,
        closeScheduleEmailingManagementDialog: closeScheduleEmailingManagementDialog,
    };
};
export var ScheduledEmailDialogProvider = function () {
    var _a = useScheduledEmailDialogProvider(), openScheduleEmailingDialog = _a.openScheduleEmailingDialog, closeScheduleEmailingDialog = _a.closeScheduleEmailingDialog, openScheduleEmailingManagementDialog = _a.openScheduleEmailingManagementDialog, closeScheduleEmailingManagementDialog = _a.closeScheduleEmailingManagementDialog;
    var _b = useToastMessage(), addSuccess = _b.addSuccess, addError = _b.addError;
    var isScheduleEmailingDialogOpen = useDashboardSelector(selectIsScheduleEmailDialogOpen);
    var isScheduleEmailingManagementDialogOpen = useDashboardSelector(selectIsScheduleEmailManagementDialogOpen);
    var onScheduleEmailingError = useCallback(function () {
        closeScheduleEmailingDialog();
        addError({ id: "dialogs.schedule.email.submit.error" });
    }, []);
    var onScheduleEmailingSuccess = useCallback(function () {
        closeScheduleEmailingDialog();
        addSuccess({ id: "dialogs.schedule.email.submit.success" });
    }, []);
    var onScheduleEmailingCancel = useCallback(function () {
        closeScheduleEmailingDialog();
        openScheduleEmailingManagementDialog();
    }, []);
    var onScheduleEmailingManagementDelete = useCallback(function () {
        addSuccess({ id: "dialogs.schedule.email.delete.success" });
    }, []);
    var onScheduleEmailingManagementAdd = useCallback(function () {
        closeScheduleEmailingManagementDialog();
        openScheduleEmailingDialog();
    }, []);
    var onScheduleEmailingManagementClose = useCallback(function () {
        closeScheduleEmailingManagementDialog();
    }, []);
    var onScheduleEmailingManagementLoadingError = useCallback(function () {
        closeScheduleEmailingManagementDialog();
        addError({ id: "dialogs.schedule.management.load.error" });
    }, []);
    var onScheduleEmailingManagementDeleteError = useCallback(function () {
        closeScheduleEmailingManagementDialog();
        addError({ id: "dialogs.schedule.management.delete.error" });
    }, []);
    return (React.createElement(React.Fragment, null,
        isScheduleEmailingManagementDialogOpen && (React.createElement(ScheduledEmailManagementDialog, { isVisible: isScheduleEmailingManagementDialogOpen, onAdd: onScheduleEmailingManagementAdd, onClose: onScheduleEmailingManagementClose, onDeleteSuccess: onScheduleEmailingManagementDelete, onLoadError: onScheduleEmailingManagementLoadingError, onDeleteError: onScheduleEmailingManagementDeleteError })),
        isScheduleEmailingDialogOpen && (React.createElement(ScheduledEmailDialog, { isVisible: isScheduleEmailingDialogOpen, onCancel: onScheduleEmailingCancel, onError: onScheduleEmailingError, onSuccess: onScheduleEmailingSuccess }))));
};
//# sourceMappingURL=ScheduledEmailDialogProvider.js.map