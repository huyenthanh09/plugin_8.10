// (C) 2022 GoodData Corporation
import { __read } from "tslib";
import React, { useCallback, useState } from "react";
import { FormattedMessage, useIntl } from "react-intl";
import { Button, Dialog, Typography } from "@gooddata/sdk-ui-kit";
import { ScheduledEmails } from "./ScheduledEmails";
import { useScheduledEmailManagement } from "./useScheduledEmailManagement";
import { DeleteScheduleConfirmDialog } from "./DeleteScheduleConfirmDialog";
import { selectCurrentUser, useDashboardSelector } from "../../../model";
/**
 * @alpha
 */
export var ScheduledEmailManagementDialog = function (props) {
    var onAdd = props.onAdd, onDelete = props.onDeleteSuccess, onClose = props.onClose, onLoadError = props.onLoadError, onDeleteError = props.onDeleteError;
    var _a = __read(useState(null), 2), scheduledEmailToDelete = _a[0], setScheduledEmailToDelete = _a[1];
    var _b = __read(useState(true), 2), isLoading = _b[0], setIsLoading = _b[1];
    var _c = __read(useState([]), 2), scheduledEmails = _c[0], setScheduledEmails = _c[1];
    var currentUser = useDashboardSelector(selectCurrentUser);
    var intl = useIntl();
    var onLoadSuccess = useCallback(function (scheduledEmails) {
        setIsLoading(false);
        setScheduledEmails(scheduledEmails);
    }, []);
    var handleScheduleDelete = useCallback(function (scheduledEmail) {
        setScheduledEmailToDelete(scheduledEmail);
    }, []);
    var handleScheduleDeleteSuccess = useCallback(function () {
        onDelete === null || onDelete === void 0 ? void 0 : onDelete();
        setScheduledEmailToDelete(null);
        setIsLoading(true);
    }, []);
    useScheduledEmailManagement({
        loadScheduledMails: isLoading,
        onError: onLoadError,
        onSuccess: onLoadSuccess,
    });
    return (React.createElement(React.Fragment, null,
        React.createElement(Dialog, { displayCloseButton: true, onCancel: onClose, className: "gd-scheduled-email-management-dialog s-scheduled-email-management-dialog" },
            React.createElement("div", null,
                React.createElement(Typography, { tagName: "h3" },
                    React.createElement(FormattedMessage, { id: "dialogs.schedule.management.title" }))),
            React.createElement("div", { className: "gd-scheduled-emails-content" },
                React.createElement(ScheduledEmails, { onDelete: handleScheduleDelete, isLoading: isLoading, scheduledEmails: scheduledEmails, currentUserEmail: currentUser === null || currentUser === void 0 ? void 0 : currentUser.email })),
            React.createElement("div", { className: "gd-content-divider" }),
            React.createElement("div", { className: "gd-buttons" },
                React.createElement(Button, { onClick: onAdd, className: "gd-button-secondary gd-add-button s-add-button", iconLeft: "gd-icon-plus", value: intl.formatMessage({ id: "dialogs.schedule.management.addSchedule" }) }),
                React.createElement(Button, { onClick: onClose, className: "gd-button-secondary s-close-button", value: intl.formatMessage({ id: "close" }) }))),
        scheduledEmailToDelete && (React.createElement(DeleteScheduleConfirmDialog, { scheduledEmail: scheduledEmailToDelete, onCancel: function () { return setScheduledEmailToDelete(null); }, onSuccess: handleScheduleDeleteSuccess, onError: onDeleteError }))));
};
//# sourceMappingURL=ScheduledEmailManagementDialog.js.map