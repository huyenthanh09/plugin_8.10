// (C) 2022 GoodData Corporation
import { bucketAttribute, bucketAttributes, bucketItems, bucketMeasure, bucketMeasures, insightFilters, insightSorts, insightTotals, } from "@gooddata/sdk-model";
import { bucketConversion, insightConversion } from "./convertor";
function namedSdkModelPropMetaFor(name, propType) {
    return {
        cardinality: propType,
        typeImport: {
            name: name,
            importType: "named",
            package: "@gooddata/sdk-model",
        },
    };
}
function namedSdkModelPropGroupMetaFor(name) {
    return {
        Single: namedSdkModelPropMetaFor(name, "scalar"),
        Multiple: namedSdkModelPropMetaFor(name, "array"),
    };
}
var sdkModelPropMetas = {
    Measure: namedSdkModelPropGroupMetaFor("IMeasure"),
    Attribute: namedSdkModelPropGroupMetaFor("IAttribute"),
    AttributeOrMeasure: namedSdkModelPropGroupMetaFor("IAttributeOrMeasure"),
    Filter: namedSdkModelPropGroupMetaFor("IFilter"),
    SortItem: namedSdkModelPropGroupMetaFor("ISortItem"),
    Total: namedSdkModelPropGroupMetaFor("ITotal"),
};
function firstBucketItem(bucket) {
    var _a;
    return (_a = bucketItems(bucket)) === null || _a === void 0 ? void 0 : _a[0];
}
/**
 * Utility function for creating bucket conversion for a single {@link @gooddata/sdk-model#IAttribute} item.
 */
export function singleAttributeBucketConversion(propName, bucketName) {
    return bucketConversion(propName, sdkModelPropMetas.Attribute.Single, bucketName, bucketAttribute);
}
/**
 * Utility function for creating bucket conversion for multiple {@link @gooddata/sdk-model#IAttribute} items.
 */
export function multipleAttributesBucketConversion(propName, bucketName) {
    return bucketConversion(propName, sdkModelPropMetas.Attribute.Multiple, bucketName, bucketAttributes);
}
/**
 * Utility function for creating bucket conversion for a single {@link @gooddata/sdk-model#IMeasure} item.
 */
export function singleMeasureBucketConversion(propName, bucketName) {
    return bucketConversion(propName, sdkModelPropMetas.Measure.Single, bucketName, bucketMeasure);
}
/**
 * Utility function for creating bucket conversion for multiple {@link @gooddata/sdk-model#IMeasure} items.
 */
export function multipleMeasuresBucketConversion(propName, bucketName) {
    return bucketConversion(propName, sdkModelPropMetas.Measure.Multiple, bucketName, bucketMeasures);
}
/**
 * Utility function for creating bucket conversion for a single {@link @gooddata/sdk-model#IAttributeOrMeasure} item.
 */
export function singleAttributeOrMeasureBucketConversion(propName, bucketName) {
    return bucketConversion(propName, sdkModelPropMetas.AttributeOrMeasure.Single, bucketName, firstBucketItem);
}
/**
 * Utility function for creating bucket conversion for multiple {@link @gooddata/sdk-model#IAttributeOrMeasure} items.
 */
export function multipleAttributesOrMeasuresBucketConversion(propName, bucketName) {
    return bucketConversion(propName, sdkModelPropMetas.AttributeOrMeasure.Multiple, bucketName, bucketItems);
}
/**
 * Utility function for creating insight conversion for multiple {@link @gooddata/sdk-model#IFilter} items.
 */
export function filtersInsightConversion(propName) {
    return insightConversion(propName, sdkModelPropMetas.Filter.Multiple, insightFilters);
}
/**
 * Utility function for creating insight conversion for multiple {@link @gooddata/sdk-model#ISortItem} items.
 */
export function sortsInsightConversion(propName) {
    return insightConversion(propName, sdkModelPropMetas.SortItem.Multiple, insightSorts);
}
/**
 * Utility function for creating insight conversion for multiple {@link @gooddata/sdk-model#ITotal} items.
 */
export function totalsInsightConversion(propName) {
    return insightConversion(propName, sdkModelPropMetas.Total.Multiple, insightTotals);
}
//# sourceMappingURL=convenience.js.map