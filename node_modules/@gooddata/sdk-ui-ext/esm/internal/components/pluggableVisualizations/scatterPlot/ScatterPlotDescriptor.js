import { __extends } from "tslib";
import { BucketNames } from "@gooddata/sdk-ui";
import { PluggableScatterPlot } from "./PluggableScatterPlot";
import { BigChartDescriptor } from "../BigChartDescriptor";
import { filtersInsightConversion, getInsightToPropsConverter, getReactEmbeddingCodeGenerator, singleAttributeBucketConversion, singleMeasureBucketConversion, sortsInsightConversion, } from "../../../utils/embeddingCodeGenerator";
import { chartAdditionalFactories, chartConfigInsightConversion } from "../chartCodeGenUtils";
var ScatterPlotDescriptor = /** @class */ (function (_super) {
    __extends(ScatterPlotDescriptor, _super);
    function ScatterPlotDescriptor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getEmbeddingCode = getReactEmbeddingCodeGenerator({
            component: {
                importType: "named",
                name: "ScatterPlot",
                package: "@gooddata/sdk-ui-charts",
            },
            insightToProps: getInsightToPropsConverter({
                xAxisMeasure: singleMeasureBucketConversion("xAxisMeasure", BucketNames.MEASURES),
                yAxisMeasure: singleMeasureBucketConversion("yAxisMeasure", BucketNames.SECONDARY_MEASURES),
                attribute: singleAttributeBucketConversion("attribute", BucketNames.ATTRIBUTE),
                filters: filtersInsightConversion("filters"),
                sortBy: sortsInsightConversion("sortBy"),
                config: chartConfigInsightConversion("config"),
            }),
            additionalFactories: chartAdditionalFactories,
        });
        return _this;
    }
    ScatterPlotDescriptor.prototype.getFactory = function () {
        return function (params) { return new PluggableScatterPlot(params); };
    };
    return ScatterPlotDescriptor;
}(BigChartDescriptor));
export { ScatterPlotDescriptor };
//# sourceMappingURL=ScatterPlotDescriptor.js.map