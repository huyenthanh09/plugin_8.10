import { __extends } from "tslib";
import { BucketNames, isDrillIntersectionAttributeItem } from "@gooddata/sdk-ui";
import { PluggableHeatmap } from "./PluggableHeatmap";
import { BigChartDescriptor } from "../BigChartDescriptor";
import { drillDownFromAttributeLocalId } from "../../../utils/ImplicitDrillDownHelper";
import { addIntersectionFiltersToInsight, modifyBucketsAttributesForDrillDown } from "../drillDownUtil";
import { filtersInsightConversion, getInsightToPropsConverter, getReactEmbeddingCodeGenerator, singleAttributeBucketConversion, singleAttributeOrMeasureBucketConversion, sortsInsightConversion, } from "../../../utils/embeddingCodeGenerator";
import { chartAdditionalFactories, chartConfigInsightConversion } from "../chartCodeGenUtils";
var HeatmapDescriptor = /** @class */ (function (_super) {
    __extends(HeatmapDescriptor, _super);
    function HeatmapDescriptor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getEmbeddingCode = getReactEmbeddingCodeGenerator({
            component: {
                importType: "named",
                name: "Heatmap",
                package: "@gooddata/sdk-ui-charts",
            },
            insightToProps: getInsightToPropsConverter({
                measure: singleAttributeOrMeasureBucketConversion("measure", BucketNames.MEASURES),
                rows: singleAttributeBucketConversion("rows", BucketNames.VIEW),
                columns: singleAttributeBucketConversion("columns", BucketNames.STACK),
                filters: filtersInsightConversion("filters"),
                sortBy: sortsInsightConversion("sortBy"),
                config: chartConfigInsightConversion("config"),
            }),
            additionalFactories: chartAdditionalFactories,
        });
        return _this;
    }
    HeatmapDescriptor.prototype.getFactory = function () {
        return function (params) { return new PluggableHeatmap(params); };
    };
    HeatmapDescriptor.prototype.applyDrillDown = function (insight, drillDownContext) {
        var withFilters = this.addFilters(insight, drillDownContext.drillDefinition, drillDownContext.event);
        return modifyBucketsAttributesForDrillDown(withFilters, drillDownContext.drillDefinition);
    };
    HeatmapDescriptor.prototype.addFilters = function (source, drillConfig, event) {
        var clicked = drillDownFromAttributeLocalId(drillConfig);
        var cutIntersection = (event.drillContext.intersection || []).filter(function (i) {
            return isDrillIntersectionAttributeItem(i.header) &&
                i.header.attributeHeader.localIdentifier === clicked;
        });
        return addIntersectionFiltersToInsight(source, cutIntersection);
    };
    return HeatmapDescriptor;
}(BigChartDescriptor));
export { HeatmapDescriptor };
//# sourceMappingURL=HeatmapDescriptor.js.map