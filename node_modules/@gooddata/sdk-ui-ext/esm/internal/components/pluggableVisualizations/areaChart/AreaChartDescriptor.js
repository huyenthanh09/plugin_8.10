import { __extends } from "tslib";
import { BucketNames } from "@gooddata/sdk-ui";
import { PluggableAreaChart } from "./PluggableAreaChart";
import { BigChartDescriptor } from "../BigChartDescriptor";
import { modifyBucketsAttributesForDrillDown, reverseAndTrimIntersection, addIntersectionFiltersToInsight, } from "../drillDownUtil";
import { filtersInsightConversion, getInsightToPropsConverter, getReactEmbeddingCodeGenerator, multipleAttributesBucketConversion, multipleAttributesOrMeasuresBucketConversion, singleAttributeBucketConversion, sortsInsightConversion, } from "../../../utils/embeddingCodeGenerator";
import { chartAdditionalFactories, chartConfigInsightConversion } from "../chartCodeGenUtils";
var AreaChartDescriptor = /** @class */ (function (_super) {
    __extends(AreaChartDescriptor, _super);
    function AreaChartDescriptor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getEmbeddingCode = getReactEmbeddingCodeGenerator({
            component: {
                importType: "named",
                name: "AreaChart",
                package: "@gooddata/sdk-ui-charts",
            },
            insightToProps: getInsightToPropsConverter({
                measures: multipleAttributesOrMeasuresBucketConversion("measures", BucketNames.MEASURES),
                viewBy: multipleAttributesBucketConversion("viewBy", BucketNames.VIEW),
                stackBy: singleAttributeBucketConversion("stackBy", BucketNames.STACK),
                filters: filtersInsightConversion("filters"),
                sortBy: sortsInsightConversion("sortBy"),
                config: chartConfigInsightConversion("config"),
            }),
            additionalFactories: chartAdditionalFactories,
        });
        return _this;
    }
    AreaChartDescriptor.prototype.getFactory = function () {
        return function (params) { return new PluggableAreaChart(params); };
    };
    AreaChartDescriptor.prototype.applyDrillDown = function (insight, drillDownContext) {
        var withFilters = this.addFilters(insight, drillDownContext.drillDefinition, drillDownContext.event);
        return modifyBucketsAttributesForDrillDown(withFilters, drillDownContext.drillDefinition);
    };
    AreaChartDescriptor.prototype.addFilters = function (source, drillConfig, event) {
        var cutIntersection = reverseAndTrimIntersection(drillConfig, event.drillContext.intersection);
        return addIntersectionFiltersToInsight(source, cutIntersection);
    };
    return AreaChartDescriptor;
}(BigChartDescriptor));
export { AreaChartDescriptor };
//# sourceMappingURL=AreaChartDescriptor.js.map