import { __extends } from "tslib";
// (C) 2021-2022 GoodData Corporation
import { insightSanitize } from "@gooddata/sdk-model";
import { isAttributeColumnWidthItem, } from "@gooddata/sdk-ui-pivot";
import { BucketNames } from "@gooddata/sdk-ui";
import { PluggablePivotTable } from "./PluggablePivotTable";
import { BaseChartDescriptor } from "../baseChart/BaseChartDescriptor";
import { addIntersectionFiltersToInsight, modifyBucketsAttributesForDrillDown, sanitizeTableProperties, } from "../drillDownUtil";
import { filtersInsightConversion, getInsightToPropsConverter, getReactEmbeddingCodeGenerator, insightConversion, multipleAttributesBucketConversion, multipleAttributesOrMeasuresBucketConversion, sortsInsightConversion, totalsInsightConversion, } from "../../../utils/embeddingCodeGenerator";
import { pivotTableConfigFromInsight } from "./pivotTableConfigFromInsight";
var PivotTableDescriptor = /** @class */ (function (_super) {
    __extends(PivotTableDescriptor, _super);
    function PivotTableDescriptor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getEmbeddingCode = getReactEmbeddingCodeGenerator({
            component: {
                importType: "named",
                name: "PivotTable",
                package: "@gooddata/sdk-ui-pivot",
            },
            insightToProps: getInsightToPropsConverter({
                measures: multipleAttributesOrMeasuresBucketConversion("measures", BucketNames.MEASURES),
                rows: multipleAttributesBucketConversion("rows", BucketNames.ATTRIBUTE),
                columns: multipleAttributesBucketConversion("columns", BucketNames.COLUMNS),
                filters: filtersInsightConversion("filters"),
                sortBy: sortsInsightConversion("sortBy"),
                totals: totalsInsightConversion("totals"),
                config: insightConversion("config", {
                    typeImport: {
                        importType: "named",
                        name: "IPivotTableConfig",
                        package: "@gooddata/sdk-ui-pivot",
                    },
                    cardinality: "scalar",
                }, pivotTableConfigFromInsight),
            }),
            additionalFactories: [
                {
                    importInfo: {
                        name: "newWidthForAttributeColumn",
                        package: "@gooddata/sdk-ui-pivot",
                        importType: "named",
                    },
                    transformation: function (obj) {
                        return isAttributeColumnWidthItem(obj)
                            ? factoryNotationForAttributeColumnWidthItem(obj)
                            : undefined;
                    },
                },
            ],
        });
        return _this;
    }
    PivotTableDescriptor.prototype.getFactory = function () {
        return function (params) { return new PluggablePivotTable(params); };
    };
    PivotTableDescriptor.prototype.getSizeInfo = function (_insight, layoutDescriptor, settings) {
        return {
            width: {
                default: layoutDescriptor.gridColumnsCount,
                min: 3,
                max: layoutDescriptor.gridColumnsCount,
            },
            height: {
                default: this.getDefaultHeight(settings.enableKDWidgetCustomHeight),
                min: this.getMinHeight(settings.enableKDWidgetCustomHeight),
                max: this.getMaxHeight(settings.enableKDWidgetCustomHeight),
            },
        };
    };
    PivotTableDescriptor.prototype.applyDrillDown = function (insight, drillDownContext) {
        var drillDownInsight = modifyBucketsAttributesForDrillDown(insight, drillDownContext.drillDefinition);
        var drillDownInsightWithFilters = addIntersectionFiltersToInsight(drillDownInsight, drillDownContext.event.drillContext.intersection);
        return sanitizeTableProperties(insightSanitize(drillDownInsightWithFilters));
    };
    return PivotTableDescriptor;
}(BaseChartDescriptor));
export { PivotTableDescriptor };
function factoryNotationForAttributeColumnWidthItem(obj) {
    var _a = obj.attributeColumnWidthItem, attributeIdentifier = _a.attributeIdentifier, width = _a.width;
    var widthValue = width.value, allowGrowToFit = width.allowGrowToFit;
    return allowGrowToFit
        ? "newWidthForAttributeColumn(" + attributeIdentifier + ", " + widthValue + ", true)"
        : "newWidthForAttributeColumn(" + attributeIdentifier + ", " + widthValue + ")";
}
//# sourceMappingURL=PivotTableDescriptor.js.map