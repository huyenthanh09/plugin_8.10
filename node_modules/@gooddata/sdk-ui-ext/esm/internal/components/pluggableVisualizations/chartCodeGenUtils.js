import { __assign } from "tslib";
// (C) 2022 GoodData Corporation
import { factoryNotationFor, isColorMappingItem, insightProperties, } from "@gooddata/sdk-model";
import filter from "lodash/fp/filter";
import flow from "lodash/fp/flow";
import fromPairs from "lodash/fromPairs";
import toPairs from "lodash/toPairs";
import { insightConversion, } from "../../utils/embeddingCodeGenerator";
import { getChartSupportedControls } from "../../utils/propertiesHelper";
import { removeUseless } from "../../utils/removeUseless";
var supportedChartConfigProperties = new Set([
    "colorMapping",
    "colorPalette",
    "dataLabels",
    "dataPoints",
    "dualAxis",
    "enableJoinedAttributeAxisName",
    "grid",
    "legend",
    "legendLayout",
    "limits",
    "primaryChartType",
    "secondaryChartType",
    "secondary_xaxis",
    "secondary_yaxis",
    "separators",
    "stackMeasures",
    "stackMeasuresToPercent",
    "xFormat",
    "xLabel",
    "xaxis",
    "yFormat",
    "yLabel",
    "yaxis",
]);
export function chartConfigFromInsight(insight, ctx) {
    var _a, _b, _c, _d, _e;
    var properties = insightProperties(insight);
    var controls = (_a = properties === null || properties === void 0 ? void 0 : properties.controls) !== null && _a !== void 0 ? _a : {};
    var withValuesFromContext = __assign(__assign(__assign(__assign({}, controls), ((ctx === null || ctx === void 0 ? void 0 : ctx.colorPalette) ? { colorPalette: ctx === null || ctx === void 0 ? void 0 : ctx.colorPalette } : {})), (((_b = ctx === null || ctx === void 0 ? void 0 : ctx.settings) === null || _b === void 0 ? void 0 : _b.separators) ? { separators: (_c = ctx === null || ctx === void 0 ? void 0 : ctx.settings) === null || _c === void 0 ? void 0 : _c.separators } : {})), (((_d = ctx === null || ctx === void 0 ? void 0 : ctx.settings) === null || _d === void 0 ? void 0 : _d.locale) ? { locale: (_e = ctx === null || ctx === void 0 ? void 0 : ctx.settings) === null || _e === void 0 ? void 0 : _e.locale } : {}));
    return flow(toPairs, filter(function (_a) {
        var key = _a[0];
        return supportedChartConfigProperties.has(key);
    }), fromPairs, function (c) { return getChartSupportedControls(c, insight, ctx === null || ctx === void 0 ? void 0 : ctx.settings); }, removeUseless)(withValuesFromContext);
}
export var chartAdditionalFactories = [
    {
        importInfo: {
            importType: "named",
            name: "getColorMappingPredicate",
            package: "@gooddata/sdk-ui-vis-commons",
        },
        transformation: function (obj) {
            return isColorMappingItem(obj)
                ? "{predicate: getColorMappingPredicate(\"" + obj.id + "\"), color: " + factoryNotationFor(obj.color) + "}"
                : undefined;
        },
    },
];
var chartConfigPropMeta = {
    typeImport: {
        importType: "named",
        name: "IChartConfig",
        package: "@gooddata/sdk-ui-charts",
    },
    cardinality: "scalar",
};
export function chartConfigInsightConversion(propName) {
    return insightConversion(propName, chartConfigPropMeta, chartConfigFromInsight);
}
//# sourceMappingURL=chartCodeGenUtils.js.map