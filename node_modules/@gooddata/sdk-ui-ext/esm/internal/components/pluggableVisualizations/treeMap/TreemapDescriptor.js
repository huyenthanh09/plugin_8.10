import { __extends } from "tslib";
import { BucketNames } from "@gooddata/sdk-ui";
import { PluggableTreemap } from "./PluggableTreemap";
import { BigChartDescriptor } from "../BigChartDescriptor";
import { addIntersectionFiltersToInsight, modifyBucketsAttributesForDrillDown, reverseAndTrimIntersection, } from "../drillDownUtil";
import { filtersInsightConversion, getInsightToPropsConverter, getReactEmbeddingCodeGenerator, multipleAttributesOrMeasuresBucketConversion, singleAttributeBucketConversion, } from "../../../utils/embeddingCodeGenerator";
import { chartAdditionalFactories, chartConfigInsightConversion } from "../chartCodeGenUtils";
var TreemapDescriptor = /** @class */ (function (_super) {
    __extends(TreemapDescriptor, _super);
    function TreemapDescriptor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getEmbeddingCode = getReactEmbeddingCodeGenerator({
            component: {
                importType: "named",
                name: "Treemap",
                package: "@gooddata/sdk-ui-charts",
            },
            insightToProps: getInsightToPropsConverter({
                measures: multipleAttributesOrMeasuresBucketConversion("measures", BucketNames.MEASURES),
                viewBy: singleAttributeBucketConversion("viewBy", BucketNames.VIEW),
                segmentBy: singleAttributeBucketConversion("segmentBy", BucketNames.SEGMENT),
                filters: filtersInsightConversion("filters"),
                config: chartConfigInsightConversion("config"),
            }),
            additionalFactories: chartAdditionalFactories,
        });
        return _this;
    }
    TreemapDescriptor.prototype.getFactory = function () {
        return function (params) { return new PluggableTreemap(params); };
    };
    TreemapDescriptor.prototype.applyDrillDown = function (source, drillDownContext) {
        var withFilters = this.addFilters(source, drillDownContext.drillDefinition, drillDownContext.event);
        return modifyBucketsAttributesForDrillDown(withFilters, drillDownContext.drillDefinition);
    };
    TreemapDescriptor.prototype.addFilters = function (source, drillConfig, event) {
        var cutIntersection = reverseAndTrimIntersection(drillConfig, event.drillContext.intersection);
        return addIntersectionFiltersToInsight(source, cutIntersection);
    };
    return TreemapDescriptor;
}(BigChartDescriptor));
export { TreemapDescriptor };
//# sourceMappingURL=TreemapDescriptor.js.map