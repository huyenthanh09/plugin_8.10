import { __assign } from "tslib";
// (C) 2019-2022 GoodData Corporation
import { GdcScheduledMail } from "@gooddata/api-model-bear";
import { NotSupported, } from "@gooddata/sdk-backend-spi";
import { uriRef } from "@gooddata/sdk-model";
export var convertScheduledMailAttachment = function (scheduledMailAttachment) {
    if (GdcScheduledMail.isKpiDashboardAttachment(scheduledMailAttachment)) {
        var _a = scheduledMailAttachment.kpiDashboardAttachment, format = _a.format, uri = _a.uri, filterContext = _a.filterContext;
        return {
            dashboard: uriRef(uri),
            format: format,
            filterContext: filterContext ? uriRef(filterContext) : undefined,
        };
    }
    else if (GdcScheduledMail.isVisualizationWidgetAttachment(scheduledMailAttachment)) {
        var _b = scheduledMailAttachment.visualizationWidgetAttachment, uri = _b.uri, dashboardUri = _b.dashboardUri, formats = _b.formats, filterContext = _b.filterContext, exportOptions = _b.exportOptions;
        var convertedExportOptions = exportOptions
            ? {
                exportOptions: {
                    includeFilters: exportOptions.includeFilterContext === "yes",
                    mergeHeaders: exportOptions.mergeHeaders === "yes",
                },
            }
            : {};
        return __assign({ widgetDashboard: uriRef(dashboardUri), widget: uriRef(uri), formats: formats, filterContext: filterContext ? uriRef(filterContext) : undefined }, convertedExportOptions);
    }
    else {
        throw new NotSupported("Cannot convert attachment - only dashboard and widget attachments are currently supported.");
    }
};
export var convertScheduledMail = function (scheduledMail) {
    var _a = scheduledMail.scheduledMail, _b = _a.content, attachments = _b.attachments, body = _b.body, subject = _b.subject, to = _b.to, when = _b.when, bcc = _b.bcc, lastSuccessfull = _b.lastSuccessfull, unsubscribed = _b.unsubscribed, _c = _a.meta, uri = _c.uri, identifier = _c.identifier, title = _c.title, summary = _c.summary, unlisted = _c.unlisted;
    return __assign(__assign({ title: title, description: summary }, (uri
        ? {
            ref: uriRef(uri),
            identifier: identifier,
            uri: uri,
        }
        : {})), { body: body,
        subject: subject,
        to: to, when: {
            startDate: when.startDate,
            endDate: when.endDate,
            timeZone: when.timeZone,
            recurrence: when.recurrency,
        }, bcc: bcc, lastSuccessful: lastSuccessfull, unsubscribed: unsubscribed, attachments: attachments.map(convertScheduledMailAttachment), unlisted: !!unlisted });
};
//# sourceMappingURL=scheduledMails.js.map